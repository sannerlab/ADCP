#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu Aug  3 12:26:02 2023
To test openMM support for swiss NSTs.

@author: sshanker
"""

import sys
import os
parent_dir = os.path.split( os.path.abspath(os.path.dirname(__file__)))[0]
sys.path.append(parent_dir)

print ("if error with openMM version unset PYTHONPATH")

ffxml_set = 'sannerlab'
L_or_D = 'Term'


from openMMmethods import ommTreatment
from utils import ffxmlfile, loaded_ffxml_names

class myprint_class():
    '''My print class similar to the one written my MS in runADCP.py'''
    def __init__(self,summaryFile):
        self.summaryFile = summaryFile
        self.intiated = False
    def __call__( self, txt, newline=True):
        if self.summaryFile:
            if self.intiated:
                fid = open(self.summaryFile,'a')
            else:
                fid = open(self.summaryFile,'w+')
                self.intiated = 1
            fid.write(txt)            
            if newline:
                fid.write('\n')
            fid.close()
        sys.stdout.write(txt)
        if newline:
            sys.stdout.write('\n')

# decoy arguments 
kw={'sequence': '', 'partition': None, 'input': None, 
    'target': '', 'rotlibs': 'swiss', 'userrotlibs': None, 
    'numSteps': 20000, 'nbRuns': 4, 'maxCores': None, 'keepWorkingFolder': False,
    'jobName': 'test3', 'dryRun': False, 'cyclic': False, 'cystein': False, 
    'overwriteFiles': True, 'seedValue': -1, 'nc': None, 'rmsd': None, 'ref': None,
    'nmodes': 2, 'minimize': 1, 'dockingRanking': True, 'omm_max_itr': 2, 
    'omm_environment': 'vacuum', 'omm_nst': False, 'systemffxml':ffxml_set}


def test_aa_compatibility():  
    '''This prograg tries to load peptide in openmm and evaluates if
    each NST in peptides, generated by ADCP, is supported'''
    
    path_this = os.path.abspath(os.path.dirname(__file__))    
    ffxml = ffxmlfile(os.path.join( parent_dir +"/data/openMMff", loaded_ffxml_names(kw)[0] +"_ff.xml"))    
    pep_dir = os.path.abspath( os.path.join(path_this,'data/NST/ADCP_generated_peptides/%s/' % L_or_D))
    receptor = os.path.abspath(os.path.join(path_this,'data/NST/ADCP_generated_peptides/rec/rigidReceptor.pdbqt'))
    
       
    if not os.path.exists(os.path.join(path_this,"tempfiles")):
        os.mkdir(os.path.join(path_this,"tempfiles"))
        
    myprint = myprint_class(os.path.join(path_this,"test_aa_%s_%s.log" % (ffxml_set, L_or_D)))    
    pep_files =[]
    for file in os.listdir(pep_dir):
        if file.endswith('.pdb'):
            pep_files.append(file)
            
    pep_files.sort()
    
    for pep in pep_files:
        pep_init = pep.replace("_out.pdb","")
        nstname = pep_init.split("_")[-1]
        # print(nstname)
        # if not nstname in ['AS2', 'CP24', 'CP34', 'CPG4', 'CPH2', 'FCL','ALO', 'IIL' 'HL2', 'HLU', 'LME', 'MEG', 'ORN']:
        #     continue
            
        myprint("\nEVALUATING PEPTIDE WITH %s" % nstname)        
        if not nstname in ffxml.get_all_residues():
            myprint("NO OpenMm parameters for %s" % nstname)
            continue
    
        # pep_init = 'test_YOF'   
        kw['recpath'] = receptor
                
        ommobject = ommTreatment( nstname, pep_init, myprint=myprint)
        ommobject.peptide_dir = pep_dir+"/"
        ommobject.omm_proj_dir = os.path.join(path_this,"tempfiles/out_" + pep_init)
        ommobject.omm_temp_dir = os.path.join(path_this,"tempfiles/temp")
        ommobject.amber_parm_out_dir= os.path.join(path_this,"tempfiles/amber")
        ommobject.CLEAN_AT_END = False
        ommobject.debug_openmm_load_mode = True         # only to load and check, do not minimize
        ommobject(**kw)
        myprint("\n")
    
    
test_aa_compatibility() # To test 